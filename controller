public class SampleController {
    @FXML private Button CalButton, CancleButton;
    @FXML private Button M1pButton, M2pButton, M3pButton;
    @FXML private Button M1mButton, M2mButton, M3mButton;
    @FXML private TextArea ListTextArea;
    @FXML private Label sumLabel;
    @FXML private Button AdminButton, OrderButton;
    
    private int sum=0;
    private String[] menu_name = {"아메리카노", "카푸치노", "카페라떼"};  // 주문 할 품목 배열방으로 만들어놓기
    private int countm[] = new int[3];
    
    Kiosksum kiosksum = new Kiosksum();

	private void menu_append() {		
		ListTextArea.setText("");
		for(int i=0; i<3;i++) {
			ListTextArea.appendText(menu_name[i] + " : " + countm[i] + "잔"+"\n");
		}	
	}		// 메뉴 추가 버튼을 누를 시 아메리카노, 카푸치노, 카페라떼의 개수를 출력해줌
	@FXML
    public void M1pButtonAction(ActionEvent event) { 	// 키오스크 + 버튼을 누를 시 주문 개수 1증가
    	countm[0]=countm[0]+1;
    	menu_append();
    }
	@FXML
	public void M2pButtonAction(ActionEvent event) {
    	countm[1]++;    	
    	menu_append();
    }
    @FXML
    public void M3pButtonAction(ActionEvent event) {
    	countm[2]++;    	
    	menu_append();
    }
    @FXML
    public void M1mButtonAction(ActionEvent event) {	// -버튼을 누를 시 제품 개수 -1
    	if(countm[0]>0) countm[0]--;
    	menu_append();
    }
    @FXML
    public void M2mButtonAction(ActionEvent event) {
    	if(countm[1]>0) countm[1]--;
    	menu_append();
    }
    @FXML
    public  void M3mButtonAction(ActionEvent event) {
    	if(countm[2]>0) countm[2]--;
    	menu_append();
    }    
    @FXML
    public void CancleButtonAction(ActionEvent event) { // 취소버튼을 누를 시
    	sumLabel.setText("0");		// 총액 sumLabel text를 0으로 설정
    	ListTextArea.setText("");	// 제품을 모두 초기화
    	for(int i=0;i<3; i++) {
    		countm[i]=0;
    	}	
    	sum = 0;	// 합계 0으로 초기화
    }
    @FXML
    public void SumButtonAction(ActionEvent event) { // 합계 버튼을 누를 시
    	sum = kiosksum.ksum(countm);	// kiosksum 클래스에서 주문한 금액을 계산함
    	sumLabel.setText(sum + "");
    }
    @FXML
    public void AdminButtonAction(ActionEvent event) {
    	try {
			Parent root = FXMLLoader.load(getClass().getResource("adminlogin.fxml"));
			Scene scene = new Scene(root);
			Stage stage = new Stage();
			stage.setScene(scene);
			stage.setTitle("관리자 로그인 화면-5월");
			stage.show();
		} catch(Exception e) {
			e.printStackTrace();
		}
    }			// 관리자 로그인 버튼을 누를 시 adminlogin.fxml 에 만들어둔 화면을 띄우기
    @FXML
    public void OrderButtonAction(ActionEvent event) { // 주문버튼을 누를 시
    	//if(sum==0) { 경고메시지 }
    	//else if(sum!=0) {
    	//디비 접속
    	//실제 주문 내역 디비에 저장하기
    
    	if(sum!=0) {
    		DBconnect conn = new DBconnect();	// DB연결하는 코드
    		Connection conn2 = conn.getconn();
    		
    		Str ing sql = "insert into orderlist_accounts" // 'orderlist_accounts' 테이블에 데이터를 삽입하는 INSERT문
    				+ " (idx, order_time, menu1, count1, menu2, count2, menu3, count3, sum)" 
    				+ " values (orderlist_idx_pk.nextval, current_timestamp, '아메리카노', ?, '카푸치노', ?, '카페라떼', ?, ?)";
    				// 삽입할 열은 idx, order_time, menu1, count1, menu2, count2, menu3, count3, sum
				// 값으로는 orderlist_idx_pk.nextval, current_timestamp, '아메리카노', ?, '카푸치노', ?, '카페라떼', ?, ?을 사용한다.
				// orderlist_idx_pk.nextval은 시퀀스 객체인 orderlist_idx_pk에서 다음 값을 가져오는 것을 나타낸다.
				// current_timestamp는 주문버튼을 눌렀을때 그 시간을 나타낸다.
				// ?에는 사용자가 메뉴를 주문한 주문 갯수가 들어간다.
    		try {
				PreparedStatement ps = conn2.prepareStatement(sql); // ?에 사용자가 입력한 값을 넣는 코드
				ps.setInt(1, countm[0]); // 첫번째(두, 세, 네번째도) ?에 countm[0](1, 2, sum)에 있는 값을 넣는다.
				ps.setInt(2, countm[1]);
				ps.setInt(3, countm[2]);
				ps.setInt(4, sum);
				ResultSet rs = ps.executeQuery(); // sql 쿼리 실행
				
				if(rs.next()) {
					sumLabel.setText("0");
		    			ListTextArea.setText("");
		    			for(int i=0;i<3; i++) {
		    				countm[i]=0;
					}	
					sum = 0;
				
					Alert alert = new Alert(AlertType.INFORMATION); // 정보창 띄우기
					alert.setHeaderText("배달의 민족");
	    				alert.setContentText("배달의 민족 주문");
	    				alert.show(); // stage를 보여주는 코드와 같은 역할
				} else {
					Alert alert = new Alert(AlertType.WARNING);
					alert.setHeaderText("배달의 민족");
		    			alert.setContentText("오류");
		    			alert.show();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
    	} else {
    		Alert alert = new Alert(AlertType.WARNING);
    		alert.setContentText("메뉴를 선택하고 계산하기를 누르십시오");
    		alert.show();
    	}
    }
}
